"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var checkbox_1 = require("./checkbox");
var _ = require("lodash");
var HabbajetBinding = /** @class */ (function () {
    function HabbajetBinding(budget, saveObject, index, name, isNew, frames, value) {
        this.budget = budget;
        this.saveObject = saveObject;
        this.index = index;
        this.name = name;
        this.frames = frames;
        this.value = value;
        this.checkboxes = [
            new checkbox_1.CheckboxBinding("Sunday", saveObject, index, isNew),
            new checkbox_1.CheckboxBinding("Monday", saveObject, index, isNew),
            new checkbox_1.CheckboxBinding("Tuesday", saveObject, index, isNew),
            new checkbox_1.CheckboxBinding("Wednesday", saveObject, index, isNew),
            new checkbox_1.CheckboxBinding("Thursday", saveObject, index, isNew),
            new checkbox_1.CheckboxBinding("Friday", saveObject, index, isNew),
            new checkbox_1.CheckboxBinding("Saturday", saveObject, index, isNew)
        ];
        this.acting = false;
        this.transforming = false;
        this.action = 'i';
        this.frame = 0;
        if (isNew) {
            this.state = 0;
            this.saveData();
        }
        else {
            this.value = saveObject.getString("h" + this.index + "value");
            this.name = saveObject.getString("h" + this.index + "name");
            this.state = saveObject.getNumber("h" + this.index + "stateIndex");
        }
        this.setActiveDay();
        this.setState(this.state);
    }
    HabbajetBinding.prototype.dailyUpdate = function (success) {
        if (!this.isBusy()) {
            this.activeDay.fillCheckbox(success);
            this.checkboxStateUpdate();
            this.saveData();
        }
    };
    HabbajetBinding.prototype.checkboxStateUpdate = function () {
        var newState = 0;
        var numSetBoxes = 0;
        _.forEach(this.checkboxes, function (c) {
            if (c.isChecked()) {
                newState++;
            }
            if (c.isSet()) {
                numSetBoxes++;
            }
        });
        if (numSetBoxes > 6) {
            this.endWeek(newState);
        }
        else {
            this.setState(newState);
        }
        this.setActiveDay();
    };
    HabbajetBinding.prototype.setImage = function () {
        this.image = "~/images/h" + this.state + "/" + this.action + this.frame + ".png";
        // console.log("image changed to: " + this.image);
    };
    HabbajetBinding.prototype.animate = function () {
        if (this.frames.exists(this.state, this.frame, this.action)) {
            this.setImage();
        }
        else {
            this.makeIdle();
        }
        this.frame++;
    };
    HabbajetBinding.prototype.makeIdle = function () {
        this.resetBusiness();
        this.action = 'i';
        this.restartAnimation();
    };
    HabbajetBinding.prototype.restartAnimation = function () {
        var _this = this;
        clearInterval(this.animationID);
        this.frame = 0;
        this.animationID = setInterval(function () {
            _this.animate();
        }, 100);
    };
    HabbajetBinding.prototype.setState = function (newState) {
        var oldState = this.state;
        this.state = newState;
        if (newState !== oldState) {
            this.transform();
        }
        else {
            this.makeIdle();
        }
    };
    HabbajetBinding.prototype.endWeek = function (successes) {
        this.budget.updateTotal(successes, this.value);
        _.forEach(this.checkboxes, function (c) {
            c.reset();
        });
        this.setState(0);
    };
    HabbajetBinding.prototype.setActiveDay = function () {
        for (var i = 0; i < this.checkboxes.length; i++) {
            if (!this.checkboxes[i].isSet()) {
                this.activeDay = this.checkboxes[i];
                return;
            }
        }
    };
    HabbajetBinding.prototype.saveData = function () {
        this.saveObject.setString("h" + this.index + "value", this.value);
        this.saveObject.setString("h" + this.index + "name", this.name);
        this.saveObject.setNumber("h" + this.index + "stateIndex", this.state);
    };
    HabbajetBinding.prototype.transform = function () {
        this.transforming = true;
        this.action = 't';
        this.restartAnimation();
    };
    HabbajetBinding.prototype.act = function () {
        if (this.isBusy()) {
            return;
        }
        this.transforming = false;
        var actionType = Math.random() * 2;
        if (actionType < 1) {
            this.action = 'a';
        }
        else {
            this.action = 'b';
        }
        this.restartAnimation();
    };
    HabbajetBinding.prototype.resetBusiness = function () {
        this.acting = false;
        this.transforming = false;
    };
    HabbajetBinding.prototype.isBusy = function () {
        return this.acting || this.transforming;
    };
    return HabbajetBinding;
}());
exports.HabbajetBinding = HabbajetBinding;
//# sourceMappingURL=data:application/json;base64,
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CheckboxState;
(function (CheckboxState) {
    CheckboxState[CheckboxState["NEUTRAL"] = 0] = "NEUTRAL";
    CheckboxState[CheckboxState["POSITIVE"] = 1] = "POSITIVE";
    CheckboxState[CheckboxState["NEGATIVE"] = 2] = "NEGATIVE";
})(CheckboxState || (CheckboxState = {}));
var CheckboxBinding = /** @class */ (function () {
    function CheckboxBinding(title, saveObject, index, isNew) {
        this.saveObject = saveObject;
        this.index = index;
        this.title = title;
        if (isNew) {
            this.state = CheckboxState.NEUTRAL;
        }
        else {
            this.state = this.saveObject.getNumber(this.title + "" + this.index);
        }
        this.setImage();
    }
    CheckboxBinding.prototype.cycleStates = function () {
        if (this.state === CheckboxState.NEUTRAL) {
            this.state = CheckboxState.POSITIVE;
        }
        else if (this.state === CheckboxState.POSITIVE) {
            this.state = CheckboxState.NEGATIVE;
        }
        else if (this.state === CheckboxState.NEGATIVE) {
            this.state = CheckboxState.NEUTRAL;
        }
        this.setImage();
    };
    CheckboxBinding.prototype.setImage = function () {
        if (this.state === CheckboxState.NEUTRAL) {
            this.image = "~/images/checkbox/Neutral.png";
        }
        else if (this.state === CheckboxState.POSITIVE) {
            this.image = "~/images/checkbox/Positive.png";
        }
        else if (this.state === CheckboxState.NEGATIVE) {
            this.image = "~/images/checkbox/Negative.png";
        }
        this.saveData();
    };
    CheckboxBinding.prototype.isChecked = function () {
        return this.state === CheckboxState.POSITIVE;
    };
    CheckboxBinding.prototype.isSet = function () {
        return this.state !== CheckboxState.NEUTRAL;
    };
    CheckboxBinding.prototype.fillCheckbox = function (success) {
        this.state = success ? CheckboxState.POSITIVE : CheckboxState.NEGATIVE;
        this.setImage();
    };
    CheckboxBinding.prototype.reset = function () {
        this.state = CheckboxState.NEUTRAL;
        this.setImage();
    };
    CheckboxBinding.prototype.saveData = function () {
        this.saveObject.setNumber(this.title + "" + this.index, this.state);
    };
    return CheckboxBinding;
}());
exports.CheckboxBinding = CheckboxBinding;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGVja2JveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUssYUFJSjtBQUpELFdBQUssYUFBYTtJQUNkLHVEQUFPLENBQUE7SUFDUCx5REFBUSxDQUFBO0lBQ1IseURBQVEsQ0FBQTtBQUNaLENBQUMsRUFKSSxhQUFhLEtBQWIsYUFBYSxRQUlqQjtBQUVEO0lBS0kseUJBQVksS0FBYSxFQUFVLFVBQWUsRUFBVSxLQUFhLEVBQUUsS0FBYztRQUF0RCxlQUFVLEdBQVYsVUFBVSxDQUFLO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBUTtRQUNyRSxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixFQUFFLENBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pFLENBQUM7UUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELHFDQUFXLEdBQVg7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUN4QyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQ3hDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDdkMsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0NBQVEsR0FBUjtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLEtBQUssR0FBRywrQkFBK0IsQ0FBQztRQUNqRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxnQ0FBZ0MsQ0FBQztRQUNsRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxnQ0FBZ0MsQ0FBQztRQUNsRCxDQUFDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxtQ0FBUyxHQUFUO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUNqRCxDQUFDO0lBRUQsK0JBQUssR0FBTDtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFDaEQsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxPQUFnQjtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUN0RSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELCtCQUFLLEdBQUw7UUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxrQ0FBUSxHQUFSO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEUsQ0FBQztJQUNMLHNCQUFDO0FBQUQsQ0FBQyxBQTFERCxJQTBEQztBQTFEWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImVudW0gQ2hlY2tib3hTdGF0ZSB7XHJcbiAgICBORVVUUkFMLFxyXG4gICAgUE9TSVRJVkUsXHJcbiAgICBORUdBVElWRVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hCaW5kaW5nIHtcclxuICAgIHB1YmxpYyBzdGF0ZTogQ2hlY2tib3hTdGF0ZTtcclxuICAgIHB1YmxpYyBpbWFnZTogU3RyaW5nO1xyXG4gICAgcHVibGljIHRpdGxlOiBTdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IodGl0bGU6IHN0cmluZywgcHJpdmF0ZSBzYXZlT2JqZWN0OiBhbnksIHByaXZhdGUgaW5kZXg6IG51bWJlciwgaXNOZXc6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgaWYoaXNOZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENoZWNrYm94U3RhdGUuTkVVVFJBTDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5zYXZlT2JqZWN0LmdldE51bWJlcih0aGlzLnRpdGxlICsgXCJcIiArIHRoaXMuaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldEltYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY3ljbGVTdGF0ZXMoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuTkVVVFJBTCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gQ2hlY2tib3hTdGF0ZS5QT1NJVElWRTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuUE9TSVRJVkUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENoZWNrYm94U3RhdGUuTkVHQVRJVkU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLk5FR0FUSVZFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDaGVja2JveFN0YXRlLk5FVVRSQUw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0SW1hZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRJbWFnZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UgPSBcIn4vaW1hZ2VzL2NoZWNrYm94L05ldXRyYWwucG5nXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLlBPU0lUSVZFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UgPSBcIn4vaW1hZ2VzL2NoZWNrYm94L1Bvc2l0aXZlLnBuZ1wiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5ORUdBVElWRSkge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlID0gXCJ+L2ltYWdlcy9jaGVja2JveC9OZWdhdGl2ZS5wbmdcIjtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zYXZlRGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ2hlY2tlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5QT1NJVElWRTtcclxuICAgIH1cclxuXHJcbiAgICBpc1NldCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSAhPT0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGxDaGVja2JveChzdWNjZXNzOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN1Y2Nlc3MgPyBDaGVja2JveFN0YXRlLlBPU0lUSVZFOiBDaGVja2JveFN0YXRlLk5FR0FUSVZFO1xyXG4gICAgICAgIHRoaXMuc2V0SW1hZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMO1xyXG4gICAgICAgIHRoaXMuc2V0SW1hZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlRGF0YSgpIHtcclxuICAgICAgICB0aGlzLnNhdmVPYmplY3Quc2V0TnVtYmVyKHRoaXMudGl0bGUgKyBcIlwiICsgdGhpcy5pbmRleCwgdGhpcy5zdGF0ZSk7XHJcbiAgICB9XHJcbn0iXX0=
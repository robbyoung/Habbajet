"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CheckboxState;
(function (CheckboxState) {
    CheckboxState[CheckboxState["NEUTRAL"] = 0] = "NEUTRAL";
    CheckboxState[CheckboxState["POSITIVE"] = 1] = "POSITIVE";
    CheckboxState[CheckboxState["NEGATIVE"] = 2] = "NEGATIVE";
})(CheckboxState || (CheckboxState = {}));
var CheckboxBinding = /** @class */ (function () {
    function CheckboxBinding(saveObject, index, isNew, weekday) {
        this.saveObject = saveObject;
        this.index = index;
        this.weekday = weekday;
        if (isNew) {
            this.state = CheckboxState.NEUTRAL;
        }
        else {
            this.state = this.saveObject.getNumber(this.weekday + "" + this.index);
        }
        this.setImage();
    }
    CheckboxBinding.prototype.cycleStates = function () {
        if (this.state === CheckboxState.NEUTRAL) {
            this.state = CheckboxState.POSITIVE;
        }
        else if (this.state === CheckboxState.POSITIVE) {
            this.state = CheckboxState.NEGATIVE;
        }
        else if (this.state === CheckboxState.NEGATIVE) {
            this.state = CheckboxState.NEUTRAL;
        }
        this.setImage();
    };
    CheckboxBinding.prototype.setImage = function () {
        if (this.state === CheckboxState.NEUTRAL) {
            this.image = "~/images/checkbox/Neutral.png";
        }
        else if (this.state === CheckboxState.POSITIVE) {
            this.image = "~/images/checkbox/Positive.png";
        }
        else if (this.state === CheckboxState.NEGATIVE) {
            this.image = "~/images/checkbox/Negative.png";
        }
        this.saveData();
    };
    CheckboxBinding.prototype.isChecked = function () {
        return this.state === CheckboxState.POSITIVE;
    };
    CheckboxBinding.prototype.isSet = function () {
        return this.state !== CheckboxState.NEUTRAL;
    };
    CheckboxBinding.prototype.fillCheckbox = function (success) {
        this.state = success ? CheckboxState.POSITIVE : CheckboxState.NEGATIVE;
        this.setImage();
    };
    CheckboxBinding.prototype.reset = function () {
        this.state = CheckboxState.NEUTRAL;
        this.saveData();
        this.setImage();
    };
    CheckboxBinding.prototype.saveData = function () {
        this.saveObject.setNumber(this.weekday + "" + this.index, this.state);
    };
    CheckboxBinding.prototype.clearData = function () {
        this.saveObject.remove(this.weekday + "" + this.index);
    };
    CheckboxBinding.prototype.changeIndex = function (newIndex) {
        this.clearData();
        this.index = newIndex;
        this.saveData();
    };
    CheckboxBinding.prototype.setTime = function (title, time) {
        this.title = title;
        this.time = time;
    };
    return CheckboxBinding;
}());
exports.CheckboxBinding = CheckboxBinding;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGVja2JveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUssYUFJSjtBQUpELFdBQUssYUFBYTtJQUNkLHVEQUFPLENBQUE7SUFDUCx5REFBUSxDQUFBO0lBQ1IseURBQVEsQ0FBQTtBQUNaLENBQUMsRUFKSSxhQUFhLEtBQWIsYUFBYSxRQUlqQjtBQUVEO0lBTUkseUJBQW9CLFVBQWUsRUFBVSxLQUFhLEVBQUUsS0FBYyxFQUFVLE9BQWU7UUFBL0UsZUFBVSxHQUFWLFVBQVUsQ0FBSztRQUFVLFVBQUssR0FBTCxLQUFLLENBQVE7UUFBMEIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUMvRixFQUFFLENBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELHFDQUFXLEdBQVg7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUN4QyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsUUFBUSxDQUFDO1FBQ3hDLENBQUM7UUFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMvQyxJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDdkMsQ0FBQztRQUNELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0NBQVEsR0FBUjtRQUNJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDdkMsSUFBSSxDQUFDLEtBQUssR0FBRywrQkFBK0IsQ0FBQztRQUNqRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxnQ0FBZ0MsQ0FBQztRQUNsRCxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxnQ0FBZ0MsQ0FBQztRQUNsRCxDQUFDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxtQ0FBUyxHQUFUO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUNqRCxDQUFDO0lBRUQsK0JBQUssR0FBTDtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFDaEQsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxPQUFnQjtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUN0RSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELCtCQUFLLEdBQUw7UUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2hCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsa0NBQVEsR0FBUjtRQUNJLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRCxtQ0FBUyxHQUFUO1FBQ0ksSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxxQ0FBVyxHQUFYLFVBQVksUUFBZ0I7UUFDeEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsaUNBQU8sR0FBUCxVQUFRLEtBQWEsRUFBRSxJQUFZO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFDTCxzQkFBQztBQUFELENBQUMsQUExRUQsSUEwRUM7QUExRVksMENBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJlbnVtIENoZWNrYm94U3RhdGUge1xyXG4gICAgTkVVVFJBTCxcclxuICAgIFBPU0lUSVZFLFxyXG4gICAgTkVHQVRJVkVcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIENoZWNrYm94QmluZGluZyB7XHJcbiAgICBwdWJsaWMgc3RhdGU6IENoZWNrYm94U3RhdGU7XHJcbiAgICBwdWJsaWMgaW1hZ2U6IHN0cmluZztcclxuICAgIHB1YmxpYyB0aXRsZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHRpbWU6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhdmVPYmplY3Q6IGFueSwgcHJpdmF0ZSBpbmRleDogbnVtYmVyLCBpc05ldzogYm9vbGVhbiwgcHJpdmF0ZSB3ZWVrZGF5OiBudW1iZXIpIHtcclxuICAgICAgICBpZihpc05ldykge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnNhdmVPYmplY3QuZ2V0TnVtYmVyKHRoaXMud2Vla2RheSArIFwiXCIgKyB0aGlzLmluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRJbWFnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGN5Y2xlU3RhdGVzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLk5FVVRSQUwpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENoZWNrYm94U3RhdGUuUE9TSVRJVkU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLlBPU0lUSVZFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDaGVja2JveFN0YXRlLk5FR0FUSVZFO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5ORUdBVElWRSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldEltYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0SW1hZ2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuTkVVVFJBTCkge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlID0gXCJ+L2ltYWdlcy9jaGVja2JveC9OZXV0cmFsLnBuZ1wiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5QT1NJVElWRSkge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlID0gXCJ+L2ltYWdlcy9jaGVja2JveC9Qb3NpdGl2ZS5wbmdcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuTkVHQVRJVkUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZSA9IFwifi9pbWFnZXMvY2hlY2tib3gvTmVnYXRpdmUucG5nXCI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2F2ZURhdGEoKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0NoZWNrZWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuUE9TSVRJVkU7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTZXQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUgIT09IENoZWNrYm94U3RhdGUuTkVVVFJBTDtcclxuICAgIH1cclxuXHJcbiAgICBmaWxsQ2hlY2tib3goc3VjY2VzczogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdWNjZXNzID8gQ2hlY2tib3hTdGF0ZS5QT1NJVElWRTogQ2hlY2tib3hTdGF0ZS5ORUdBVElWRTtcclxuICAgICAgICB0aGlzLnNldEltYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IENoZWNrYm94U3RhdGUuTkVVVFJBTDtcclxuICAgICAgICB0aGlzLnNhdmVEYXRhKCk7XHJcbiAgICAgICAgdGhpcy5zZXRJbWFnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNhdmVEYXRhKCkge1xyXG4gICAgICAgIHRoaXMuc2F2ZU9iamVjdC5zZXROdW1iZXIodGhpcy53ZWVrZGF5ICsgXCJcIiArIHRoaXMuaW5kZXgsIHRoaXMuc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyRGF0YSgpIHtcclxuICAgICAgICB0aGlzLnNhdmVPYmplY3QucmVtb3ZlKHRoaXMud2Vla2RheSArIFwiXCIgKyB0aGlzLmluZGV4KTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VJbmRleChuZXdJbmRleDogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5jbGVhckRhdGEoKTtcclxuICAgICAgICB0aGlzLmluZGV4ID0gbmV3SW5kZXg7XHJcbiAgICAgICAgdGhpcy5zYXZlRGF0YSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFRpbWUodGl0bGU6IHN0cmluZywgdGltZTogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMudGltZSA9IHRpbWU7XHJcbiAgICB9XHJcbn0iXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CheckboxState;
(function (CheckboxState) {
    CheckboxState[CheckboxState["NEUTRAL"] = 0] = "NEUTRAL";
    CheckboxState[CheckboxState["POSITIVE"] = 1] = "POSITIVE";
    CheckboxState[CheckboxState["NEGATIVE"] = 2] = "NEGATIVE";
})(CheckboxState || (CheckboxState = {}));
var CheckboxBinding = /** @class */ (function () {
    function CheckboxBinding(saveObject, index, isNew, weekday) {
        this.saveObject = saveObject;
        this.index = index;
        this.weekday = weekday;
        if (isNew) {
            this.state = CheckboxState.NEUTRAL;
        }
        else {
            this.state = this.saveObject.getNumber(this.weekday + "" + this.index);
            this.time = this.saveObject.getNumber(this.weekday + "" + this.index + "t");
        }
        this.setImage();
    }
    CheckboxBinding.prototype.cycleStates = function () {
        if (this.state === CheckboxState.NEUTRAL) {
            this.state = CheckboxState.POSITIVE;
        }
        else if (this.state === CheckboxState.POSITIVE) {
            this.state = CheckboxState.NEGATIVE;
        }
        else if (this.state === CheckboxState.NEGATIVE) {
            this.state = CheckboxState.NEUTRAL;
        }
        this.setImage();
    };
    CheckboxBinding.prototype.setImage = function () {
        if (this.state === CheckboxState.NEUTRAL) {
            this.image = "~/images/checkbox/Neutral.png";
        }
        else if (this.state === CheckboxState.POSITIVE) {
            this.image = "~/images/checkbox/Positive.png";
        }
        else if (this.state === CheckboxState.NEGATIVE) {
            this.image = "~/images/checkbox/Negative.png";
        }
        this.saveData();
    };
    CheckboxBinding.prototype.isChecked = function () {
        return this.state === CheckboxState.POSITIVE;
    };
    CheckboxBinding.prototype.isSet = function () {
        return this.state !== CheckboxState.NEUTRAL;
    };
    CheckboxBinding.prototype.fillCheckbox = function (success) {
        this.state = success ? CheckboxState.POSITIVE : CheckboxState.NEGATIVE;
        this.setImage();
    };
    CheckboxBinding.prototype.reset = function () {
        this.state = CheckboxState.NEUTRAL;
        this.saveData();
        this.setImage();
    };
    CheckboxBinding.prototype.saveData = function () {
        this.saveObject.setNumber(this.weekday + "" + this.index, this.state);
        if (this.time !== undefined) {
            this.saveObject.setNumber(this.weekday + "" + this.index + "t", this.time);
        }
    };
    CheckboxBinding.prototype.clearData = function () {
        this.saveObject.remove(this.weekday + "" + this.index);
        this.saveObject.remove(this.weekday + "" + this.index + "t");
    };
    CheckboxBinding.prototype.changeIndex = function (newIndex) {
        this.clearData();
        this.index = newIndex;
        this.saveData();
    };
    CheckboxBinding.prototype.setTime = function (title, time) {
        this.title = title;
        this.time = time;
        this.saveData();
    };
    return CheckboxBinding;
}());
exports.CheckboxBinding = CheckboxBinding;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGVja2JveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUssYUFJSjtBQUpELFdBQUssYUFBYTtJQUNkLHVEQUFPLENBQUE7SUFDUCx5REFBUSxDQUFBO0lBQ1IseURBQVEsQ0FBQTtBQUNaLENBQUMsRUFKSSxhQUFhLEtBQWIsYUFBYSxRQUlqQjtBQUVEO0lBTUkseUJBQW9CLFVBQWUsRUFBVSxLQUFhLEVBQUUsS0FBYyxFQUFVLE9BQWU7UUFBL0UsZUFBVSxHQUFWLFVBQVUsQ0FBSztRQUFVLFVBQUssR0FBTCxLQUFLLENBQVE7UUFBMEIsWUFBTyxHQUFQLE9BQU8sQ0FBUTtRQUMvRixFQUFFLENBQUEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQ1AsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLENBQUM7UUFBQyxJQUFJLENBQUMsQ0FBQztZQUNKLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsQ0FBQztRQUNoRixDQUFDO1FBQ0QsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxxQ0FBVyxHQUFYO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDeEMsQ0FBQztRQUFDLElBQUksQ0FB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QUFDO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsUUFBUSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRUQsaUNBQU8sR0FBUCxVQUFRLEtBQWEsRUFBRSxJQUFZO1FBQy9CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBaEZELElBZ0ZDO0FBaEZZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiZW51bSBDaGVja2JveFN0YXRlIHtcclxuICAgIE5FVVRSQUwsXHJcbiAgICBQT1NJVElWRSxcclxuICAgIE5FR0FUSVZFXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGVja2JveEJpbmRpbmcge1xyXG4gICAgcHVibGljIHN0YXRlOiBDaGVja2JveFN0YXRlO1xyXG4gICAgcHVibGljIGltYWdlOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgdGl0bGU6IHN0cmluZztcclxuICAgIHB1YmxpYyB0aW1lOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzYXZlT2JqZWN0OiBhbnksIHByaXZhdGUgaW5kZXg6IG51bWJlciwgaXNOZXc6IGJvb2xlYW4sIHByaXZhdGUgd2Vla2RheTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYoaXNOZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENoZWNrYm94U3RhdGUuTkVVVFJBTDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5zYXZlT2JqZWN0LmdldE51bWJlcih0aGlzLndlZWtkYXkgKyBcIlwiICsgdGhpcy5pbmRleCk7XHJcbiAgICAgICAgICAgIHRoaXMudGltZSA9IHRoaXMuc2F2ZU9iamVjdC5nZXROdW1iZXIodGhpcy53ZWVrZGF5ICsgXCJcIiArIHRoaXMuaW5kZXggKyBcInRcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0SW1hZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBjeWNsZVN0YXRlcygpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDaGVja2JveFN0YXRlLlBPU0lUSVZFO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5QT1NJVElWRSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gQ2hlY2tib3hTdGF0ZS5ORUdBVElWRTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuTkVHQVRJVkUpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENoZWNrYm94U3RhdGUuTkVVVFJBTDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRJbWFnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEltYWdlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLk5FVVRSQUwpIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZSA9IFwifi9pbWFnZXMvY2hlY2tib3gvTmV1dHJhbC5wbmdcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuUE9TSVRJVkUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZSA9IFwifi9pbWFnZXMvY2hlY2tib3gvUG9zaXRpdmUucG5nXCI7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLk5FR0FUSVZFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW1hZ2UgPSBcIn4vaW1hZ2VzL2NoZWNrYm94L05lZ2F0aXZlLnBuZ1wiO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNhdmVEYXRhKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNDaGVja2VkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLlBPU0lUSVZFO1xyXG4gICAgfVxyXG5cclxuICAgIGlzU2V0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlICE9PSBDaGVja2JveFN0YXRlLk5FVVRSQUw7XHJcbiAgICB9XHJcblxyXG4gICAgZmlsbENoZWNrYm94KHN1Y2Nlc3M6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gc3VjY2VzcyA/IENoZWNrYm94U3RhdGUuUE9TSVRJVkU6IENoZWNrYm94U3RhdGUuTkVHQVRJVkU7XHJcbiAgICAgICAgdGhpcy5zZXRJbWFnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBDaGVja2JveFN0YXRlLk5FVVRSQUw7XHJcbiAgICAgICAgdGhpcy5zYXZlRGF0YSgpO1xyXG4gICAgICAgIHRoaXMuc2V0SW1hZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBzYXZlRGF0YSgpIHtcclxuICAgICAgICB0aGlzLnNhdmVPYmplY3Quc2V0TnVtYmVyKHRoaXMud2Vla2RheSArIFwiXCIgKyB0aGlzLmluZGV4LCB0aGlzLnN0YXRlKTtcclxuICAgICAgICBpZih0aGlzLnRpbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLnNhdmVPYmplY3Quc2V0TnVtYmVyKHRoaXMud2Vla2RheSArIFwiXCIgKyB0aGlzLmluZGV4ICsgXCJ0XCIsIHRoaXMudGltZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyRGF0YSgpIHtcclxuICAgICAgICB0aGlzLnNhdmVPYmplY3QucmVtb3ZlKHRoaXMud2Vla2RheSArIFwiXCIgKyB0aGlzLmluZGV4KTtcclxuICAgICAgICB0aGlzLnNhdmVPYmplY3QucmVtb3ZlKHRoaXMud2Vla2RheSArIFwiXCIgKyB0aGlzLmluZGV4ICsgXCJ0XCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZUluZGV4KG5ld0luZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLmNsZWFyRGF0YSgpO1xyXG4gICAgICAgIHRoaXMuaW5kZXggPSBuZXdJbmRleDtcclxuICAgICAgICB0aGlzLnNhdmVEYXRhKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0VGltZSh0aXRsZTogc3RyaW5nLCB0aW1lOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnRpdGxlID0gdGl0bGU7XHJcbiAgICAgICAgdGhpcy50aW1lID0gdGltZTtcclxuICAgICAgICB0aGlzLnNhdmVEYXRhKCk7XHJcbiAgICB9XHJcbn0iXX0=
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CheckboxState;
(function (CheckboxState) {
    CheckboxState[CheckboxState["NEUTRAL"] = 0] = "NEUTRAL";
    CheckboxState[CheckboxState["POSITIVE"] = 1] = "POSITIVE";
    CheckboxState[CheckboxState["NEGATIVE"] = 2] = "NEGATIVE";
})(CheckboxState || (CheckboxState = {}));
var CheckboxBinding = /** @class */ (function () {
    function CheckboxBinding(title) {
        this.title = title;
        this.state = CheckboxState.NEUTRAL;
        this.setImage();
    }
    CheckboxBinding.prototype.cycleStates = function () {
        if (this.state === CheckboxState.NEUTRAL) {
            this.state = CheckboxState.POSITIVE;
        }
        else if (this.state === CheckboxState.POSITIVE) {
            this.state = CheckboxState.NEGATIVE;
        }
        else if (this.state === CheckboxState.NEGATIVE) {
            this.state = CheckboxState.NEUTRAL;
        }
        this.setImage();
    };
    CheckboxBinding.prototype.setImage = function () {
        if (this.state === CheckboxState.NEUTRAL) {
            this.image = "~/images/checkbox/Neutral.png";
        }
        else if (this.state === CheckboxState.POSITIVE) {
            this.image = "~/images/checkbox/Positive.png";
        }
        else if (this.state === CheckboxState.NEGATIVE) {
            this.image = "~/images/checkbox/Negative.png";
        }
    };
    CheckboxBinding.prototype.isChecked = function () {
        return this.state === CheckboxState.POSITIVE;
    };
    CheckboxBinding.prototype.isSet = function () {
        return this.state !== CheckboxState.NEUTRAL;
    };
    CheckboxBinding.prototype.fillCheckbox = function (success) {
        this.state = success ? CheckboxState.POSITIVE : CheckboxState.NEGATIVE;
        this.setImage();
    };
    CheckboxBinding.prototype.reset = function () {
        this.state = CheckboxState.NEUTRAL;
        this.image = "~/images/checkbox/Neutral.png";
    };
    return CheckboxBinding;
}());
exports.CheckboxBinding = CheckboxBinding;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGVja2JveC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLElBQUssYUFJSjtBQUpELFdBQUssYUFBYTtJQUNkLHVEQUFPLENBQUE7SUFDUCx5REFBUSxDQUFBO0lBQ1IseURBQVEsQ0FBQTtBQUNaLENBQUMsRUFKSSxhQUFhLEtBQWIsYUFBYSxRQUlqQjtBQUVEO0lBS0kseUJBQVksS0FBYTtRQUNyQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDbkMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxxQ0FBVyxHQUFYO1FBQ0ksRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN2QyxJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDeEMsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUN4QyxDQUFDO1FBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDO1FBQ3ZDLENBQUM7UUFDRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELGtDQUFRLEdBQVI7UUFDSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3ZDLElBQUksQ0FBQyxLQUFLLEdBQUcsK0JBQStCLENBQUM7UUFDakQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0NBQWdDLENBQUM7UUFDbEQsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxLQUFLLEdBQUcsZ0NBQWdDLENBQUM7UUFDbEQsQ0FBQztJQUNMLENBQUM7SUFFRCxtQ0FBUyxHQUFUO1FBQ0ksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssYUFBYSxDQUFDLFFBQVEsQ0FBQztJQUNqRCxDQUFDO0lBRUQsK0JBQUssR0FBTDtRQUNJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLGFBQWEsQ0FBQyxPQUFPLENBQUM7SUFDaEQsQ0FBQztJQUVELHNDQUFZLEdBQVosVUFBYSxPQUFnQjtRQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQSxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUN0RSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELCtCQUFLLEdBQUw7UUFDSSxJQUFJLENBQUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDbkMsSUFBSSxDQUFDLEtBQUssR0FBRywrQkFBK0IsQ0FBQztJQUNqRCxDQUFDO0lBQ0wsc0JBQUM7QUFBRCxDQUFDLEFBakRELElBaURDO0FBakRZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiZW51bSBDaGVja2JveFN0YXRlIHtcclxuICAgIE5FVVRSQUwsXHJcbiAgICBQT1NJVElWRSxcclxuICAgIE5FR0FUSVZFXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBDaGVja2JveEJpbmRpbmcge1xyXG4gICAgcHVibGljIHN0YXRlOiBDaGVja2JveFN0YXRlO1xyXG4gICAgcHVibGljIGltYWdlOiBTdHJpbmc7XHJcbiAgICBwdWJsaWMgdGl0bGU6IFN0cmluZztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZTogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSBDaGVja2JveFN0YXRlLk5FVVRSQUw7XHJcbiAgICAgICAgdGhpcy5zZXRJbWFnZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGN5Y2xlU3RhdGVzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLk5FVVRSQUwpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IENoZWNrYm94U3RhdGUuUE9TSVRJVkU7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnN0YXRlID09PSBDaGVja2JveFN0YXRlLlBPU0lUSVZFKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBDaGVja2JveFN0YXRlLk5FR0FUSVZFO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5ORUdBVElWRSkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldEltYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0SW1hZ2UoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuTkVVVFJBTCkge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlID0gXCJ+L2ltYWdlcy9jaGVja2JveC9OZXV0cmFsLnBuZ1wiO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5QT1NJVElWRSkge1xyXG4gICAgICAgICAgICB0aGlzLmltYWdlID0gXCJ+L2ltYWdlcy9jaGVja2JveC9Qb3NpdGl2ZS5wbmdcIjtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUgPT09IENoZWNrYm94U3RhdGUuTkVHQVRJVkUpIHtcclxuICAgICAgICAgICAgdGhpcy5pbWFnZSA9IFwifi9pbWFnZXMvY2hlY2tib3gvTmVnYXRpdmUucG5nXCI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlzQ2hlY2tlZCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSA9PT0gQ2hlY2tib3hTdGF0ZS5QT1NJVElWRTtcclxuICAgIH1cclxuXHJcbiAgICBpc1NldCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZSAhPT0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbGxDaGVja2JveChzdWNjZXNzOiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN1Y2Nlc3MgPyBDaGVja2JveFN0YXRlLlBPU0lUSVZFOiBDaGVja2JveFN0YXRlLk5FR0FUSVZFO1xyXG4gICAgICAgIHRoaXMuc2V0SW1hZ2UoKTtcclxuICAgIH1cclxuXHJcbiAgICByZXNldCgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gQ2hlY2tib3hTdGF0ZS5ORVVUUkFMO1xyXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBcIn4vaW1hZ2VzL2NoZWNrYm94L05ldXRyYWwucG5nXCI7XHJcbiAgICB9XHJcbn0iXX0=